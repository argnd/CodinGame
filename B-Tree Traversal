import java.util.*;
import java.io.*;
import java.math.*;

//Binary tree insertion and traversal
//inorder preorder postorder levelorder
//invert

//https://www.codingame.com/training/medium/binary-search-tree-traversal

class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        Node rootNode = new Node(in.nextInt());
        for (int i = 1; i < n; i++) {
            insertNode(new Node(in.nextInt()),rootNode);
        }
        
        System.out.println(preOrderTraversal(rootNode).trim());
        System.out.println(inOrderTraversal(rootNode).trim());
        System.out.println(postOrderTraversal(rootNode).trim());
        System.out.println(levelOrderTraverSal(rootNode).trim());

        invert(rootNode);
        System.err.println(preOrderTraversal(rootNode).trim());

    }//psvm

    public static void insertNode(Node n, Node root){
        if(n.value <= root.value){ //next node is left or right ?
            if (root.left == null){
                root.left = n;
            } else {
                insertNode(n, root.left);
            }
        } else {
            if (root.right == null){
                root.right = n;
            } else {
                insertNode(n, root.right);
            }
        }
    }

    public static String preOrderTraversal(Node n){
        StringBuilder sb = new StringBuilder();
        sb.append(n.value+" ");
        if (n.left != null) sb.append(preOrderTraversal(n.left));
        if (n.right != null) sb.append(preOrderTraversal(n.right));

        return sb.toString();
    }


    public static String inOrderTraversal(Node n){
        StringBuilder sb = new StringBuilder();
        if (n.left != null) sb.append(inOrderTraversal(n.left));
        sb.append(n.value+" ");
        if (n.right != null) sb.append(inOrderTraversal(n.right));

        return sb.toString();
    }


    public static String postOrderTraversal(Node n){
        StringBuilder sb = new StringBuilder();
        if (n.left != null) sb.append(postOrderTraversal(n.left));
        if (n.right != null) sb.append(postOrderTraversal(n.right));
        sb.append(n.value+" ");

        return sb.toString();
    }

    
    public static String levelOrderTraverSal(Node n) {
        StringBuilder sb = new StringBuilder();

        Queue<Node> queue = new ArrayDeque<Node>();
        queue.add(n);
        do{
            Node tmp = queue.poll();
            sb.append(tmp.value+" ");
            if (tmp.left != null) queue.add(tmp.left);
            if (tmp.right != null) queue.add(tmp.right);
        } while (!(queue.size() == 0));
        return sb.toString();
    }
    
    public static Node invert(Node n){
	if (n == null) return null; //exit

	Node left = invert(n.left); 
	Node right = invert(n.right); 

	n.left = right; 
	n.right = left; 

	return n; 
    }
    
    

}//main


class Node {
    public int value;
    public Node left = null;
    public Node right = null;

    public Node(int v){
        this.value = v;
    }
}//Class node
